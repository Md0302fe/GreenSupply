import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import {
  MDBBreadcrumb,
  MDBBreadcrumbItem,
  MDBContainer,
  MDBRow,
  MDBCol,
} from "mdb-react-ui-kit";

const AddressUpdate = () => {
  const { id } = useParams(); // L·∫•y ID t·ª´ URL
  const [formData, setFormData] = useState({
    full_name: "",
    phone: "",
    address: "",
  });

  const [errors, setErrors] = useState({
    full_name: "",
    phone: "",
    address: "",
  });

  const navigate = useNavigate();

  // üîπ H√†m ki·ªÉm tra h·ªç v√† t√™n
  const validateFullName = (name) => {
    if (!name.trim()) return "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";
    if (name.length < 2 || name.length > 40) return "T√™n ph·∫£i c√≥ t·ª´ 2 ƒë·∫øn 40 k√Ω t·ª±.";
    if (/\d/.test(name)) return "T√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a s·ªë.";
    if (/[^a-zA-Z√Ä-·ªπ\s]/.test(name)) return "T√™n kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát.";
    return "";
  };

  // üîπ H√†m ki·ªÉm tra s·ªë ƒëi·ªán tho·∫°i (ch·ªâ cho ph√©p 10 s·ªë)
  const validatePhone = (phone) => {
    if (!phone.trim()) return "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";
    if (phone.includes("-")) return "S·ªë ƒëi·ªán tho·∫°i kh√¥ng th·ªÉ l√† s·ªë √¢m.";
    if (!/^\d+$/.test(phone)) return "S·ªë ƒëi·ªán tho·∫°i ch·ªâ ƒë∆∞·ª£c ch·ª©a s·ªë.";
    if (phone.length !== 10) return "S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ ƒë√∫ng 10 s·ªë.";
    return "";
  };

  // üîπ H√†m ki·ªÉm tra ƒë·ªãa ch·ªâ
  const validateAddress = (address) => {
    if (!address.trim()) return "ƒê·ªãa ch·ªâ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.";
    if (address.length < 5) return "ƒê·ªãa ch·ªâ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±.";
    return "";
  };

  // üîπ Ki·ªÉm tra to√†n b·ªô d·ªØ li·ªáu tr∆∞·ªõc khi g·ª≠i
  const validateForm = () => {
    const fullNameError = validateFullName(formData.full_name);
    const phoneError = validatePhone(formData.phone);
    const addressError = validateAddress(formData.address);

    setErrors({ full_name: fullNameError, phone: phoneError, address: addressError });

    return !fullNameError && !phoneError && !addressError;
  };

  // üîπ L·∫•y d·ªØ li·ªáu ƒë·ªãa ch·ªâ khi v√†o trang
  useEffect(() => {
    const fetchAddress = async () => {
      try {
        const token = JSON.parse(localStorage.getItem("access_token"));
        const response = await axios.get(
          `http://localhost:3001/api/user/address/detail/${id}`,
          { headers: { Authorization: `Bearer ${token}` } }
        );

        if (response.data.status === "OK") {
          setFormData(response.data.data);
        } else {
          toast.error(response.data.message || "Kh√¥ng th·ªÉ l·∫•y ƒë·ªãa ch·ªâ!");
        }
      } catch (error) {
        toast.error("L·ªói khi t·∫£i ƒë·ªãa ch·ªâ. Vui l√≤ng th·ª≠ l·∫°i!");
        console.error("L·ªói khi t·∫£i ƒë·ªãa ch·ªâ:", error);
      }
    };

    fetchAddress();
  }, [id]);

  // üîπ G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t d·ªØ li·ªáu
  const handleSubmit = async (e) => {
    e.preventDefault();

    if (!validateForm()) return; // N·∫øu c√≥ l·ªói, kh√¥ng g·ª≠i API

    try {
      const token = JSON.parse(localStorage.getItem("access_token"));
      await axios.put(
        `http://localhost:3001/api/user/address/update/${id}`,
        formData,
        { headers: { Authorization: `Bearer ${token}` } }
      );

      toast.success("C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th√†nh c√¥ng!");
      setTimeout(() => navigate("/Address"), 2000);
    } catch (error) {
      toast.error("C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!");
      console.error("L·ªói khi c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ:", error);
    }
  };

  // üîπ X·ª≠ l√Ω thay ƒë·ªïi d·ªØ li·ªáu v√† ki·ªÉm tra l·ªói tr·ª±c ti·∫øp khi nh·∫≠p
  const handleChange = (field, value) => {
    setFormData({ ...formData, [field]: value });

    let error = "";
    if (field === "full_name") error = validateFullName(value);
    if (field === "phone") error = validatePhone(value);
    if (field === "address") error = validateAddress(value);

    setErrors({ ...errors, [field]: error });
  };

  return (
    <div className="User-Address Container flex-center-center mb-4 mt-4">
      <div className="Wrapper Width">
        <div className="bg-white shadow-lg rounded-lg p-6 border">
          <MDBContainer>
            <MDBRow>
              <MDBCol>
                <MDBBreadcrumb className="bg-light rounded-3 p-3 mb-4 border">
                  <MDBBreadcrumbItem>
                    <span onClick={() => navigate("/")} className="cursor-pointer hover:border-b hover:border-black">
                      Home
                    </span>
                  </MDBBreadcrumbItem>
                  <MDBBreadcrumbItem>
                    <span onClick={() => navigate("/profile")} className="cursor-pointer hover:border-b hover:border-black">
                      User Profile
                    </span>
                  </MDBBreadcrumbItem>
                  <MDBBreadcrumbItem>
                    <span onClick={() => navigate("/Address")} className="cursor-pointer hover:border-b hover:border-black">
                      View Address
                    </span>
                  </MDBBreadcrumbItem>
                  <MDBBreadcrumbItem active>Update Address</MDBBreadcrumbItem>
                </MDBBreadcrumb>
              </MDBCol>
            </MDBRow>

            <div className="p-6 bg-white shadow-md rounded-lg border">
              <h2 className="text-xl font-semibold mb-4">C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ</h2>
              <form onSubmit={handleSubmit}>
                <div className="mb-4">
                  <label className="block font-medium text-gray-700">H·ªç v√† T√™n:</label>
                  <input
                    className="border p-2 w-full rounded-md"
                    type="text"
                    placeholder="Nh·∫≠p t√™n ƒë·∫ßy ƒë·ªß"
                    value={formData.full_name}
                    onChange={(e) => handleChange("full_name", e.target.value)}
                  />
                  {errors.full_name && <p className="text-red-500 text-sm mt-1">{errors.full_name}</p>}
                </div>

                <div className="mb-4">
                  <label className="block font-medium text-gray-700">S·ªë ƒëi·ªán tho·∫°i:</label>
                  <input
                    className="border p-2 w-full rounded-md"
                    type="text"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    value={formData.phone}
                    onChange={(e) => handleChange("phone", e.target.value)}
                  />
                  {errors.phone && <p className="text-red-500 text-sm mt-1">{errors.phone}</p>}
                </div>

                <div className="mb-4">
                  <label className="block font-medium text-gray-700">ƒê·ªãa ch·ªâ:</label>
                  <input
                    className="border p-2 w-full rounded-md"
                    type="text"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ c·ª• th·ªÉ"
                    value={formData.address}
                    onChange={(e) => handleChange("address", e.target.value)}
                  />
                  {errors.address && <p className="text-red-500 text-sm mt-1">{errors.address}</p>}
                </div>

                <button className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-all duration-200">
                  C·∫≠p nh·∫≠t
                </button>
              </form>
            </div>
          </MDBContainer>
        </div>
      </div>
    </div>
  );
};

export default AddressUpdate;
