import React, { useState, useEffect } from "react";
import { Button, Form, Input, InputNumber, Select } from "antd";
import { useSelector } from "react-redux";
import * as RawMaterialBatchServices from "../../../../services/RawMaterialBatch";
import * as ProductionRequestServices from "../../../../services/ProductionRequestServices";
import { toast } from "react-toastify";
import { ToastContainer } from "react-toastify";
import { useNavigate } from "react-router-dom";

const { Option } = Select;

const RawMaterialBatch = () => {
  const [form] = Form.useForm();
  const [fuel_managements, set_fuel_managements] = useState([]);
  const [storages, setStorages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [processing, setProcessing] = useState([]);
  const user = useSelector((state) => state.user);
  const [requiredMaterial, setRequiredMaterial] = useState(0);
  const [isFuelSelected, setIsFuelSelected] = useState(false);
  const navigate = useNavigate();

  const generateBatchId = (prefix = "XMTH") => {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, "0"); // ƒê·ªãnh d·∫°ng 2 s·ªë
    const day = String(today.getDate()).padStart(2, "0"); // ƒê·ªãnh d·∫°ng 2 s·ªë

    const batchNumber = Math.floor(Math.random() * 1000)
      .toString()
      .padStart(3, "0");

    return `${prefix}${day}${month}${year}-${batchNumber}`;
  };
  console.log("fuel_managements => ", fuel_managements);
  const [formData, setFormData] = useState({
    batch_id: generateBatchId(),
    batch_name: "",
    fuel_type_id: "",
    production_request_id: "",
    status: "ƒêang chu·∫©n b·ªã",
    quantity: 0,
    storage_id: "",
    note: "",
    is_automatic: false,
    is_deleted: false,
  });

  const handleBatchNameChange = (e) => {
    const { value } = e.target;
    setFormData((prev) => ({
      ...prev,
      batch_name: value,
    }));
  };

  // X·ª≠ l√Ω onchange <-> input
  const handleChange = (e) => {
    const { name, value } = e.target || {};

    if (name === "production_request_id") {
      const selectedRequest = processing.find((item) => item._id === value);
      if (selectedRequest) {
        console.log("selectedRequest:", selectedRequest);
        console.log("selectedRequest.material:", selectedRequest.material);

        setFormData((prev) => ({
          ...prev,
          production_request_id: value,
          fuel_type_id: selectedRequest.material?._id,
          storage_id: selectedRequest.material?.storage_id?.name_storage || "",
        }));
      }
    }

    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      try {
        const data = { access_token: user?.access_token };
        const processingRes = await ProductionRequestServices.getAllProcessing(
          data
        );
        const storageRes = await RawMaterialBatchServices.getAllStorages(data);
        console.log("D·ªØ li·ªáu API tr·∫£ v·ªÅ:", processingRes);
        const getAllManagements =
          await RawMaterialBatchServices.getAllFuelManagements();
        if (processingRes.success) {
          setProcessing(processingRes.requests);
        } else {
          toast.warning("C√≥ l·ªói trong qu√° tr√¨nh l·∫•y d·ªØ li·ªáu");
        }
        if (storageRes.success) {
          setStorages(storageRes.data);
        } else {
          toast.warning("C√≥ l·ªói trong qu√° tr√¨nh l·∫•y d·ªØ li·ªáu");
        }
        if (getAllManagements) {
          set_fuel_managements(getAllManagements.requests);
        } else {
          toast.warning("C√≥ l·ªói trong qu√° tr√¨nh l·∫•y d·ªØ li·ªáu");
        }
      } catch (error) {
        toast.error("L·ªói khi t·∫£i d·ªØ li·ªáu kho ho·∫∑c nhi√™n li·ªáu!");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const handleKeyDown = (event) => {
    if (
      /[^0-9]/.test(event.key) &&
      event.key !== "Backspace" &&
      event.key !== "Tab"
    ) {
      event.preventDefault();
    }
  };

  const handleEstimatedProductionChange = (value) => {
    if (value === null || value === undefined || value === "") {
      form.setFieldsValue({ quantity: null }); // Kh√¥ng ƒë·∫∑t v·ªÅ 0
      setRequiredMaterial(0);
      return;
    }

    if (value === 0 || /e|E|[^0-9]/.test(value)) {
      toast.error("S·∫£n l∆∞·ª£ng kh√¥ng h·ª£p l·ªá! Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.");
      form.setFieldsValue({ quantity: null });
      return;
    }

    const required = Math.ceil(value / 0.9);
    setRequiredMaterial(required);

    const selectedFuelId = form.getFieldValue("storage_id");

    if (selectedFuelId) {
      const selectedFuel = fuel_managements.find(
        (fuel) => fuel._id === selectedFuelId
      );
      if (selectedFuel) {
        const availableFuel = selectedFuel.quantity;
        if (required > availableFuel) {
          const maxProduction = Math.floor(availableFuel * 0.9);
          toast.warning(
            `S·∫£n l∆∞·ª£ng mong mu·ªën v∆∞·ª£t qu√° s·ªë l∆∞·ª£ng nhi√™n li·ªáu hi·ªán c√≥. S·∫£n l∆∞·ª£ng t·ªëi ƒëa c√≥ th·ªÉ l√†m ƒë∆∞·ª£c l√† ${maxProduction} Kg.`
          );
          form.setFieldsValue({
            quantity: maxProduction,
          });
          setRequiredMaterial(Math.ceil(maxProduction / 0.9));
          return;
        }
      }
    }

    form.setFieldsValue({ quantity: value });
  };

  const handleFuelTypeChange = (value) => {
    form.setFieldsValue({ fuel_type_id: value });
    setIsFuelSelected(true); // Khi ch·ªçn lo·∫°i nhi√™n li·ªáu, m·ªü kh√≥a √¥ nh·∫≠p s·∫£n l∆∞·ª£ng mong mu·ªën
  };

  const onFinish = async (values) => {
    setLoading(true);
    try {
      const dataRequest = {
        access_token: user?.access_token,
        formData: {
          ...formData,
          production_request_id: formData.production_request_id, // production_request_id l√† ObjectId
          storage_id: formData.storage_id, // storage_id l√† ObjectId
          quantity: requiredMaterial,
          note: formData.note,
        },
      };
      console.log("dataRequest => ", dataRequest);

      const response = await RawMaterialBatchServices.createRawMaterialBatch(
        dataRequest
      );

      if (response.success) {
        toast.success("T·∫°o l√¥ nguy√™n li·ªáu th√†nh c√¥ng!");
        form.resetFields();
        // üëâ Chuy·ªÉn h∆∞·ªõng sau khi t·∫°o th√†nh c√¥ng
        navigate("/system/admin/raw-material-batch-list", {
          state: { createdSuccess: true },
        });
      } else {
        toast.error("T·∫°o l√¥ th·∫•t b·∫°i!");
      }
    } catch (error) {
      toast.error("C√≥ l·ªói x·∫£y ra khi t·∫°o l√¥!");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100 p-4">
      <div className="w-full max-w-3xl bg-white rounded-lg shadow p-6">
        <h2 className="text-2xl font-bold text-center mb-5 text-black">
          T·∫°o L√¥ Nguy√™n Li·ªáu B·ªï Sung
        </h2>

        {/* {loading && (
          <div className="text-center text-blue-600 font-medium">
            ƒêang t·∫£i d·ªØ li·ªáu...
          </div>
        )} */}

        <Form form={form} layout="vertical" onFinish={onFinish}>
          {/* M√£ l√¥ */}
          <div className="mb-4">
            <span className="text-xl font-bold text-gray-800">M√£ L√¥: </span>
            <span className="text-xl font-semibold text-[#A31D1D]">
              {formData?.batch_id}
            </span>
          </div>

          {/* Nh·∫≠p t√™n l√¥ */}
          <Form.Item
            label="T√™n l√¥"
            name="batch_name"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n l√¥!" }]}
          >
            <Input
              name="batch_name"
              placeholder="Nh·∫≠p t√™n l√¥ nguy√™n li·ªáu"
              value={formData.batch_name} // ƒê·∫£m b·∫£o r·∫±ng gi√° tr·ªã trong form ƒë∆∞·ª£c g·∫Øn v·ªõi state
              onChange={handleBatchNameChange} // X·ª≠ l√Ω thay ƒë·ªïi khi ng∆∞·ªùi d√πng nh·∫≠p
            />
          </Form.Item>

          {/* Ch·ªçn ƒë∆°n y√™u c·∫ßu s·∫£n xu·∫•t */}
          <Form.Item
            label="ƒê∆°n y√™u c·∫ßu s·∫£n xu·∫•t"
            name="production_request_id"
            rules={[
              {
                required: true,
                message: "Vui l√≤ng ch·ªçn ƒë∆°n y√™u c·∫ßu s·∫£n xu·∫•t!",
              },
            ]}
          >
            <Select
              placeholder="Ch·ªçn ƒë∆°n y√™u c·∫ßu s·∫£n xu·∫•t"
              className="rounded border-gray-300"
              value={formData.production_request_id}
              onChange={(value) =>
                handleChange({
                  target: { name: "production_request_id", value },
                })
              }
            >
              {processing?.map((request) => (
                <Option key={request._id} value={request._id}>
                  {request.request_name}
                </Option>
              ))}
            </Select>
          </Form.Item>

          {/* Ch·ªçn lo·∫°i nhi√™n li·ªáu */}
          <Form.Item
            label="Lo·∫°i nguy√™n li·ªáu"
            name="fuel_type_id"
            rules={[
              { required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i nguy√™n li·ªáu!" },
            ]}
          >
            <Select
              placeholder="Ch·ªçn lo·∫°i nguy√™n li·ªáu"
              className="rounded border-gray-300"
              onChange={handleFuelTypeChange}
            >
              {fuel_managements
                ?.filter((fuel) => fuel.quantity > 0)
                .map((fuel) => (
                  <Select.Option key={fuel._id} value={fuel._id}>
                    {fuel.fuel_type_id?.type_name} ({fuel.quantity} Kg)
                  </Select.Option>
                ))}
            </Select>
          </Form.Item>

          {/* Nh·∫≠p s·ªë l∆∞·ª£ng */}
          <Form.Item
            label="S·∫£n l∆∞·ª£ng mong mu·ªën (Kg)"
            name="quantity"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p s·∫£n l∆∞·ª£ng mong mu·ªën!" },
            ]}
          >
            <InputNumber
              min={null}
              className="w-full rounded border-gray-300"
              placeholder="Nh·∫≠p s·∫£n l∆∞·ª£ng mong mu·ªën"
              onChange={handleEstimatedProductionChange}
              onKeyDown={handleKeyDown}
              onBlur={() => {
                const currentValue = form.getFieldValue("quantity");
                if (!currentValue) {
                  form.setFieldsValue({ quantity: null }); // Kh√¥ng thay ƒë·ªïi gi√° tr·ªã th√†nh 0
                }
              }}
              disabled={!isFuelSelected}
            />
          </Form.Item>

          <Form.Item label="S·ªë l∆∞·ª£ng nguy√™n li·ªáu c·∫ßn thi·∫øt ∆∞·ªõc t√≠nh (Kg)">
            <InputNumber
              disabled
              className="w-full rounded border-gray-300 bg-gray-50"
              value={requiredMaterial}
            />
          </Form.Item>

          {/* Ch·ªçn kho l∆∞u tr·ªØ */}
          <Form.Item
            label="Kho L∆∞u Tr·ªØ"
            name="storage_id"
            rules={[
              {
                required: true,
                message: "Vui l√≤ng ch·ªçn kho l∆∞u tr·ªØ!",
              },
            ]}
          >
            <Select
              placeholder="Vui l√≤ng ch·ªçn kho l∆∞u tr·ªØ!"
              className="rounded border-gray-300"
              value={formData.storage_id}
              onChange={(value) =>
                handleChange({
                  target: { name: "storage_id", value },
                })
              }
            >
              {storages?.map((storage) => (
                <Option key={storage._id} value={storage._id}>
                  {storage.name_storage}
                </Option>
              ))}
            </Select>
          </Form.Item>

          {/* Nh·∫≠p ghi ch√∫ */}
          <Form.Item label="Ghi ch√∫" name="note">
            <Input.TextArea
              rows={4}
              placeholder="Nh·∫≠p ghi ch√∫ (n·∫øu c√≥)"
              value={formData.note}
              onChange={(e) =>
                setFormData((prev) => ({
                  ...prev,
                  note: e.target.value,
                }))
              }
            />
          </Form.Item>

          {/* N√∫t x√°c nh·∫≠n */}
          <Form.Item>
            <Button type="primary" htmlType="submit" className="w-full py-2">
              X√°c nh·∫≠n
            </Button>
          </Form.Item>
        </Form>
      </div>

      {/* ToastContainer */}
      <ToastContainer
        hideProgressBar={false}
        position="top-right"
        newestOnTop={false}
        pauseOnFocusLoss
        autoClose={3000}
        closeOnClick
        pauseOnHover
        theme="light"
        rtl={false}
        draggable
      />
    </div>
  );
};

export default RawMaterialBatch;
