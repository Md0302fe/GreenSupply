import React, { PureComponent, useEffect, useState } from "react";
import LogoSCM from "../../../../assets/NewProject/Logo/logo-SupplyChainManagement.jpg";
import { useNavigate } from "react-router-dom";

import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/pagination";
import { Navigation } from "swiper/modules";

import { IoSettingsSharp, IoStatsChart } from "react-icons/io5";
import { FaChartPie, FaRegUser } from "react-icons/fa";
import { LuChartColumnStacked } from "react-icons/lu";
import { MdStackedBarChart } from "react-icons/md";
import { FaChartLine, FaChartColumn } from "react-icons/fa6";
import { RiProductHuntLine, RiBarChartGroupedLine } from "react-icons/ri";
import { RxBarChart } from "react-icons/rx";
import { FcProcess } from "react-icons/fc";

import * as FuelStorageReceiptService from "../../../../services/FuelStorageReceiptService";
import * as MaterialStorageExportService from "../../../../services/MaterialStorageExportService";
import * as RawMaterialBatchServices from "../../../../services/RawMaterialBatch";
import * as ProductionRequestServices from "../../../../services/ProductionRequestServices";

import {
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from "recharts";

const dataOrderStatus = [
  { day: "Ng√†y 1", Ch·ªùDuy·ªát: 10, ƒê√£Duy·ªát: 3 },
  { day: "Ng√†y 2", Ch·ªùDuy·ªát: 12, ƒê√£Duy·ªát: 4 },
  { day: "Ng√†y 3", Ch·ªùDuy·ªát: 8, ƒê√£Duy·ªát: 5 },
  { day: "Ng√†y 4", Ch·ªùDuy·ªát: 15, ƒê√£Duy·ªát: 6 },
  { day: "Ng√†y 5", Ch·ªùDuy·ªát: 20, ƒê√£Duy·ªát: 10 },
];

const dataProductionStatus = [
  { date: "Ng√†y 1", ƒêangS·∫£nXu·∫•t: 50, Ho√†nTh√†nh: 20 },
  { date: "Ng√†y 2", ƒêangS·∫£nXu·∫•t: 70, Ho√†nTh√†nh: 30 },
  { date: "Ng√†y 3", ƒêangS·∫£nXu·∫•t: 40, Ho√†nTh√†nh: 10 },
  { date: "Ng√†y 4", ƒêangS·∫£nXu·∫•t: 80, Ho√†nTh√†nh: 20 },
  { date: "Ng√†y 5", ƒêangS·∫£nXu·∫•t: 90, Ho√†nTh√†nh: 10 },
  { date: "Ng√†y 6", ƒêangS·∫£nXu·∫•t: 60, Ho√†nTh√†nh: 30 },
  { date: "Ng√†y 7", ƒêangS·∫£nXu·∫•t: 55, Ho√†nTh√†nh: 25 },
];

const dataPieChart = [
  { name: "Group A", value: 400 },
  { name: "Group B", value: 300 },
  { name: "Group C", value: 300 },
  { name: "Group D", value: 200 },
];

const COLORS = ["#0088FE", "#00C49F", "#FFBB28", "#FF8042"];
const RADIAN = Math.PI / 180;
const renderCustomizedLabel = ({
  cx,
  cy,
  midAngle,
  innerRadius,
  outerRadius,
  percent,
  index,
}) => {
  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);

  return (
    <text
      x={x}
      y={y}
      fill="white"
      textAnchor={x > cx ? "start" : "end"}
      dominantBaseline="central"
    >
      {`${(percent * 100).toFixed(0)}%`}
    </text>
  );
};

const DashboardComponent = () => {
  const navigate = useNavigate();
  const [totalReceipts, setTotalReceipts] = useState(0);
  const [totalExports, setTotalExports] = useState(0);
  const [totalBatches, setTotalBatches] = useState(0);
  const [dateRange, setDateRange] = useState("");
  const [loading, setLoading] = useState(true);
  const [stockData, setStockData] = useState([]);
  const [completedImportExportData, setCompletedImportExportData] = useState([]);
  const [productionChartData, setProductionChartData] = useState([]);

  useEffect(() => {
    const fetchTotalExportOrders = async () => {
      try {
        // L·∫•y d·ªØ li·ªáu ƒë∆°n nh·∫≠p kho
        const receiptData =
          await FuelStorageReceiptService.getTotalFuelStorageReceipts();
        setTotalReceipts(receiptData.totalReceipts);
        setDateRange(receiptData.dateRange);

        // L·∫•y d·ªØ li·ªáu ƒë∆°n xu·∫•t kho
        const exportData =
          await MaterialStorageExportService.getTotalMaterialStorageExports();
        setTotalExports(exportData.totalExports);

        // L·∫•y d·ªØ li·ªáu l√¥ nguy√™n li·ªáu
        const batchData =
          await RawMaterialBatchServices.getTotalRawMaterialBatches();
        setTotalBatches(batchData.totalBatches);
      } catch (error) {
        console.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu y√™u c·∫ßu xu·∫•t kho:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchTotalExportOrders();
  }, []);

  useEffect(() => {
    const fetchStockData = async () => {
      try {
        // L·∫•y d·ªØ li·ªáu nh·∫≠p kho v√† xu·∫•t kho
        const importData =
          await FuelStorageReceiptService.getStockImportByDate();
        const exportDataByDate =
          await MaterialStorageExportService.getStockImportByDate();

        // T·∫°o d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        const formattedData = importData.map((item) => ({
          name: item._id, // Ng√†y
          Nh·∫≠pKho: item.totalImports, // S·ªë ƒë∆°n nh·∫≠p kho trong ng√†y
          Xu·∫•tKho: 0, // Ban ƒë·∫ßu Xu·∫•tKho b·∫±ng 0, s·∫Ω c·∫≠p nh·∫≠t sau
          Total: item.totalImports, // T√≠nh t·ªïng Nh·∫≠pKho v√† Xu·∫•tKho sau
        }));

        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng xu·∫•t kho cho m·ªói ng√†y
        exportDataByDate.forEach((item) => {
          const existingItem = formattedData.find(
            (data) => data.name === item._id
          );
          if (existingItem) {
            existingItem.Xu·∫•tKho = item.totalExports; // C·∫≠p nh·∫≠t s·ªë ƒë∆°n xu·∫•t kho
            existingItem.Total += item.totalExports; // C·ªông th√™m s·ªë ƒë∆°n xu·∫•t kho v√†o t·ªïng
          } else {
            // N·∫øu ng√†y xu·∫•t kho ch∆∞a c√≥ trong d·ªØ li·ªáu nh·∫≠p kho, th√™m v√†o
            formattedData.push({
              name: item._id,
              Nh·∫≠pKho: 0,
              Xu·∫•tKho: item.totalExports,
              Total: item.totalExports, // C·ªông th√™m s·ªë ƒë∆°n xu·∫•t kho v√†o t·ªïng
            });
          }
        });

        // L∆∞u d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
        setStockData(formattedData);

        // T√≠nh t·ªïng s·ªë ƒë∆°n nh·∫≠p kho v√† xu·∫•t kho
        const totalImports = importData.reduce(
          (acc, item) => acc + item.totalImports,
          0
        );
        const totalExports = exportDataByDate.reduce(
          (acc, item) => acc + item.totalExports,
          0
        );

        setTotalReceipts(totalImports);
        setTotalExports(totalExports);
      } catch (error) {
        console.error("L·ªói khi t·∫£i d·ªØ li·ªáu nh·∫≠p/xu·∫•t kho:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchStockData();
  }, []);

  const getMaxValue = (data) => {
    let maxValue = 0;
    data.forEach((item) => {
      maxValue = Math.max(maxValue, item.Nh·∫≠pKho + item.Xu·∫•tKho, item.Total);
    });
    return maxValue;
  };
  const maxYValue = getMaxValue(stockData);

  useEffect(() => {
    const fetchCompletedImportExportData = async () => {
      try {
        const importCompletedData =
          await FuelStorageReceiptService.getStockImportCompletedByDate();
        const exportCompletedData =
          await MaterialStorageExportService.getStockExportCompletedByDate();

        const formattedData = [];

        importCompletedData.forEach((item) => {
          formattedData.push({
            name: item._id,
            Nh·∫≠pKho: item.totalImports,
            Xu·∫•tKho: 0,
          });
        });

        exportCompletedData.forEach((item) => {
          const existing = formattedData.find((i) => i.name === item._id);
          if (existing) {
            existing.Xu·∫•tKho = item.totalExports;
          } else {
            formattedData.push({
              name: item._id,
              Nh·∫≠pKho: 0,
              Xu·∫•tKho: item.totalExports,
            });
          }
        });

        setCompletedImportExportData(
          formattedData.sort((a, b) => new Date(a.name) - new Date(b.name))
        );
      } catch (error) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ho√†n th√†nh nh·∫≠p/xu·∫•t kho:", error);
      }
    };

    fetchCompletedImportExportData();
  }, []);

  useEffect(() => {
    const fetchProductionChartData = async () => {
      try {
        const token = JSON.parse(localStorage.getItem("access_token")); 
        const res = await ProductionRequestServices.getProductionChartData({ access_token: token });
  
        const formatted = res.data.map((item) => ({
          day: item.date,
          Ch·ªùDuy·ªát: item["ƒêang s·∫£n xu·∫•t"] || 0,
          ƒê√£Duy·ªát: item["ƒê√£ duy·ªát"] || 0,
        }));
  
        setProductionChartData(formatted);
      } catch (error) {
        console.error("L·ªói khi t·∫£i bi·ªÉu ƒë·ªì y√™u c·∫ßu s·∫£n xu·∫•t:", error);
      }
    };
  
    fetchProductionChartData();
  }, []);
  

  if (loading) {
    return <div>ƒêang t·∫£i...</div>;
  }

  return (
    <div className="font-montserrat text-[#000000]">
      <div className="font-nunito w-full p-4 rounded-lg border border-[rgba(0,0,0,0.1)] shadow-md flex items-center gap-5 mb-4">
        <div className="info w-[80%] pl-10">
          <h1 className="text-[28px] font-bold leading-9 mb-3">
            T·ªïng Quan H·ªá Th·ªëng
          </h1>
          <h1 className="font-bold text-[#006838] text-[40px] mb-4">
            GreenSupplyüåø
          </h1>
          <p className="w-[70%] mb-4">
            ƒê√¢y l√† trang Dashboard d√†nh cho qu·∫£n tr·ªã vi√™n c·ªßa h·ªá th·ªëng
            GreenSupply, n∆°i b·∫°n c√≥ th·ªÉ theo d√µi v√† qu·∫£n l√Ω c√°c ch·ªâ s·ªë quan
            tr·ªçng trong quy tr√¨nh s·∫£n xu·∫•t, t·ªìn kho v√† ph√¢n ph·ªëi xo√†i.
          </p>

          <div className="flex items-center gap-3">
            <button
              className="bg-[#005a2c] hover:bg-[#00a34b] text-white font-bold text-sm py-1 px-2 rounded"
              onClick={() => navigate("/system/admin/C_purchase-order")}
            >
              T·∫°o y√™u c·∫ßu cung c·∫•p
            </button>

            <button
              className="bg-[#005a2c] hover:bg-[#00a34b] text-white font-bold text-sm py-1 px-2 rounded"
              onClick={() => navigate("/system/admin/production-request")}
            >
              T·∫°o y√™u c·∫ßu s·∫£n xu·∫•t
            </button>

            <button
              className="bg-[#005a2c] hover:bg-[#00a34b] text-white font-bold text-sm py-1 px-2 rounded"
              onClick={() => navigate("/system/admin/production-processing")}
            >
              T·∫°o quy tr√¨nh s·∫£n xu·∫•t
            </button>

            <button
              className="bg-[#005a2c] hover:bg-[#00a34b] text-white font-bold text-sm py-1 px-2 rounded"
              onClick={() => navigate("/system/admin/material-storage-export")}
            >
              T·∫°o y√™u c·∫ßu xu·∫•t kho
            </button>

            <button
              className="bg-[#005a2c] hover:bg-[#00a34b] text-white font-bold text-sm py-1 px-2 rounded"
              onClick={() => navigate("/system/admin/View-Order-Success")}
            >
              T·∫°o y√™u c·∫ßu nh·∫≠p kho
            </button>
          </div>
        </div>
        <img src={LogoSCM} className="w-[300px] pr-10" />
      </div>

      <div className="mb-4">
        <Swiper
          slidesPerView={4}
          spaceBetween={10}
          navigation={true}
          modules={[Navigation]}
          className="dashboardBoxesSlider"
        >
          <SwiperSlide>
            <div className="box p-4 cursor-pointer hover:bg-[#f1f1f1] rounded-lg border border-[rgba(0,0,0,0.1)] flex items-center gap-3">
              <RiProductHuntLine className="text-[40px] text-[#312be1d8]" />
              <div className="info w-[70%]">
                <h3 className="text-sm mb-2 font-semibold">Y√™u c·∫ßu nh·∫≠p kho</h3>
                <h1 className="text-lg mb-2 font-bold">{totalReceipts}</h1>
                <p className="text-xs text-stone-500">{dateRange}</p>
              </div>
              <IoStatsChart className="text-[50px] text-[#312be1d8]" />
            </div>
          </SwiperSlide>

          <SwiperSlide>
            <div className="box p-4 cursor-pointer hover:bg-[#f1f1f1] rounded-md border border-[rgba(0,0,0,0.1)] flex items-center gap-3">
              <IoSettingsSharp className="text-[40px] text-[#3872fa]" />
              <div className="info w-[70%]">
                <h3 className="text-sm mb-2 font-semibold">Y√™u c·∫ßu xu·∫•t kho</h3>
                <h1 className="text-lg mb-2 font-bold">{totalExports}</h1>
                <p className="text-xs text-stone-500">{dateRange}</p>
              </div>
              <RiBarChartGroupedLine className="text-[70px] text-[#3872fa]" />
            </div>
          </SwiperSlide>

          <SwiperSlide>
            <div className="box p-4 cursor-pointer hover:bg-[#f1f1f1] rounded-md border border-[rgba(0,0,0,0.1)] flex items-center gap-3">
              <FaChartPie className="text-[40px] text-[#10b981]" />
              <div className="info w-[70%]">
                <h3 className="text-sm mb-2 font-semibold">
                  S·ªë l∆∞·ª£ng l√¥ nguy√™n li·ªáu
                </h3>
                <h1 className="text-lg mb-2 font-bold">{totalBatches}</h1>
                <p className="text-xs text-stone-500">{dateRange}</p>
              </div>
              <RxBarChart className="text-[70px] text-[#10b981]" />
            </div>
          </SwiperSlide>

          <SwiperSlide>
            <div className="box p-4 cursor-pointer hover:bg-[#f1f1f1] rounded-md border border-[rgba(0,0,0,0.1)] flex items-center gap-3">
              <FcProcess className="text-[40px] text-[#7928ca]" />
              <div className="info w-[70%]">
                <h3 className="text-sm mb-2 font-semibold">
                  S·ªë l∆∞·ª£ng l√¥ th√†nh ph·∫©m
                </h3>
                <h1 className="text-lg mb-2 font-bold">11</h1>
                <p className="text-xs text-stone-500">
                  T·ª´ 1 th√°ng 1 - 25 th√°ng 3
                </p>
              </div>
              <IoStatsChart className="text-[50px] text-[#7928ca]" />
            </div>
          </SwiperSlide>
        </Swiper>
      </div>

      {/* BI·ªÇU ƒê·ªí NH·∫¨P/XU·∫§T KHO */}
      <div className="flex gap-4 mb-4">
        {/* Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng nh·∫≠p/xu·∫•t kho */}
        <div className="w-1/2 min-h-[420px] overflow-hidden rounded-lg border border-[rgba(0,0,0,0.1)] shadow-md p-4">
          <div className="flex items-center gap-3 mb-3">
            <FaChartLine className="text-[24px]" />
            <h3 className="text-lg font-semibold text-[#333] mb-0">
              S·ªë L∆∞·ª£ng Y√™u C·∫ßu Nh·∫≠p/Xu·∫•t Kho (Theo Ng√†y)
            </h3>
          </div>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={stockData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis
                dataKey="name"
                padding={{ left: 20, right: 20 }}
                tickMargin={20}
              />
              <YAxis domain={[0, maxYValue]} />
              <Tooltip />
              <Legend
                wrapperStyle={{
                  position: "relative",
                  top: 5,
                  left: "50%",
                  transform: "translateX(-50%)",
                }}
              />
              <Line
                type="monotone"
                dataKey="Nh·∫≠pKho"
                stroke="#4A90E2"
                strokeWidth={2}
                dot={{ r: 5 }}
              />
              <Line
                type="monotone"
                dataKey="Xu·∫•tKho"
                stroke="#E74C3C"
                strokeWidth={2}
                dot={{ r: 5 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>

        {/* Bi·ªÉu ƒë·ªì c·ªôt b√™n ph·∫£i */}
        <div className="w-1/2 overflow-hidden rounded-lg border border-[rgba(0,0,0,0.1)] shadow-md p-4">
          <div className="flex items-center gap-3 mb-3">
            <FaChartColumn className="text-[24px]" />
            <h3 className="text-lg font-semibold text-[#333] mb-0">
              S·ªë L∆∞·ª£ng Y√™u C·∫ßu Nh·∫≠p/Xu·∫•t Kho ƒê√£ Ho√†n Th√†nh (Theo Ng√†y)
            </h3>
          </div>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={completedImportExportData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="name" tickMargin={20} />
              <YAxis />
              <Tooltip />
              <Legend
                wrapperStyle={{
                  position: "relative",
                  top: 0,
                  left: "50%",
                  transform: "translateX(-50%)",
                }}
              />
              <Bar dataKey="Nh·∫≠pKho" fill="#4A90E2" barSize={20} />
              <Bar dataKey="Xu·∫•tKho" fill="#E74C3C" barSize={20} />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>

      <div className="flex gap-4 mb-4">
        {/* Bi·ªÉu ƒë·ªì tr√≤n */}
        {/* <div className="w-1/2 overflow-hidden rounded-lg border border-[rgba(0,0,0,0.1)] shadow-md p-4">
          <div className="flex items-center gap-3 mb-4">
            <FaChartLine className="text-[24px]" />
            <h3 className="text-lg font-semibold text-[#333]">
              S·ªë L∆∞·ª£ng Quy Tr√¨nh S·∫£n Xu·∫•t ƒê√£ ƒê∆∞·ª£c Th·ª±c Hi·ªán (Theo Ng√†y)
            </h3>
          </div>
          <div className="flex items-center gap-4">
            <ResponsiveContainer width={400} height={200}>
              <PieChart>
                <Tooltip
                  formatter={(value, name) => [`${value}`, `${name}`]}
                  contentStyle={{
                    backgroundColor: "#f9f9f9",
                    borderRadius: "5px",
                  }}
                />
                <Pie
                  data={dataPieChart}
                  cx="50%"
                  cy="50%"
                  labelLine={false}
                  label={renderCustomizedLabel}
                  outerRadius={100}
                  fill="#8884d8"
                  dataKey="value"
                >
                  {data.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[index % COLORS.length]}
                    />
                  ))}
                </Pie>
              </PieChart>
            </ResponsiveContainer>
            <div>
              <h4 className="text-md font-semibold text-[#333] mb-2">
                M·ª•c L·ª•c M√†u S·∫Øc
              </h4>
              <ul className="text-sm text-[#666]">
                {dataPieChart.map((entry, index) => (
                  <li key={index} className="flex items-center mb-2">
                    <div
                      className="w-4 h-4 mr-2"
                      style={{ backgroundColor: COLORS[index % COLORS.length] }}
                    ></div>
                    <span>
                      {entry.name}:{" "}
                      {`${(
                        (entry.value /
                          dataPieChart.reduce(
                            (acc, item) => acc + item.value,
                            0
                          )) *
                        100
                      ).toFixed(1)}%`}
                    </span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div> */}
        <div className="w-1/2 overflow-hidden rounded-lg border border-[rgba(0,0,0,0.1)] shadow-md p-4">
          <div className="flex items-center gap-3 mb-4">
            <FaChartColumn className="text-[24px]" />
            <h3 className="text-lg font-semibold text-[#333] mb-0">
              S·ªë L∆∞·ª£ng Y√™u C·∫ßu Ch·ªù T·∫°o Quy Tr√¨nh S·∫£n Xu·∫•t (Theo Ng√†y)
            </h3>
          </div>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={productionChartData}>
              <CartesianGrid strokeDasharray="2 2" />
              <XAxis dataKey="day" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="Ch·ªùDuy·ªát" fill="#FAB12F" barSize={20} />
              <Bar dataKey="ƒê√£Duy·ªát" fill="#A0C878" barSize={20} />
            </BarChart>
          </ResponsiveContainer>
        </div>

        <div className="w-1/2 overflow-hidden rounded-lg border border-[rgba(0,0,0,0.1)] shadow-md p-4">
          <div className="flex items-center gap-3 mb-4">
            <MdStackedBarChart className="text-[24px]" />
            <h3 className="text-lg font-semibold text-[#333] mb-0">
              S·ªë L∆∞·ª£ng Quy Tr√¨nh S·∫£n Xu·∫•t ƒê√£ Ho√†n Th√†nh (Theo Ng√†y)
            </h3>
          </div>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart
              data={dataProductionStatus}
              margin={{
                top: 20,
                right: 30,
                left: 20,
                bottom: 5,
              }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar
                dataKey="ƒêangS·∫£nXu·∫•t"
                stackId="a"
                fill="#F6E96B"
                barSize={25}
              />
              <Bar
                dataKey="Ho√†nTh√†nh"
                stackId="a"
                fill="#88D66C"
                barSize={25}
              />
            </BarChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
};

export default DashboardComponent;
