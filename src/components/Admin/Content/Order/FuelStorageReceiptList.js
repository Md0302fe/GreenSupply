import React, { useEffect, useState } from "react";
import { Table, Button, message, Space, Modal, Descriptions, Tag, Select, Input } from "antd";
import axios from "axios";
import { EyeOutlined, SearchOutlined } from "@ant-design/icons";
import { useSelector } from "react-redux";
import { converDateString } from "../../../../ultils";
import { Excel } from "antd-table-saveas-excel";
import _ from "lodash"; // üõ†Ô∏è Th√™m lodash ƒë·ªÉ debounce API calls

const { Option } = Select;

const FuelStorageReceiptList = () => {
  const [receipts, setReceipts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedReceipt, setSelectedReceipt] = useState(null);
  const [searchText, setSearchText] = useState(""); // üîç T√¨m ki·∫øm n√¢ng cao
  const [debouncedSearch, setDebouncedSearch] = useState(""); // Debounce Search
  const [statusFilterVal, setStatusFilterVal] = useState(""); // üéõ L·ªçc tr·∫°ng th√°i
  const [sortOrder, setSortOrder] = useState("desc"); // ‚¨Ü‚¨á S·∫Øp x·∫øp theo ng√†y nh·∫≠p kho (m·∫∑c ƒë·ªãnh m·ªõi nh·∫•t)

  const userRedux = useSelector((state) => state.user);
  const token = userRedux?.access_token || localStorage.getItem("access_token");

  // üü¢ Fetch d·ªØ li·ªáu t·ª´ API
  const fetchReceipts = async () => {
    setLoading(true);
    try {
      if (!token) {
        message.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
        setLoading(false);
        return;
      }

      const response = await axios.get("http://localhost:3001/api/fuel-storage/getAll", {
        headers: { Authorization: `Bearer ${token}` },
        params: {
          search: debouncedSearch, // üîç G·ª≠i search text ƒë√£ debounce
          status: statusFilterVal, // üéõ L·ªçc theo tr·∫°ng th√°i
          sortOrder: sortOrder, // ‚¨Ü‚¨á S·∫Øp x·∫øp theo ng√†y nh·∫≠p kho (asc/desc)
        },
      });

      console.log("üü¢ D·ªØ li·ªáu nh·∫≠n v·ªÅ t·ª´ API:", response.data); 

      if (response.data.success) {
        setReceipts(response.data.data);
      } else {
        message.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n nh·∫≠p kho!");
      }
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!");
    }
    setLoading(false);
  };

  // üõ†Ô∏è D√πng debounce cho search (tr√°nh g·ªçi API li√™n t·ª•c khi g√µ)
  useEffect(() => {
    const debounceFn = _.debounce(() => {
      setDebouncedSearch(searchText);
    }, 500); // ‚è≥ Delay 500ms tr∆∞·ªõc khi g·ªçi API

    debounceFn();
    return () => debounceFn.cancel(); // Cleanup debounce khi component unmount
  }, [searchText]);

  // üîÑ G·ªçi API khi c√≥ thay ƒë·ªïi trong t√¨m ki·∫øm, l·ªçc ho·∫∑c s·∫Øp x·∫øp
  useEffect(() => {
    fetchReceipts();
  }, [debouncedSearch, statusFilterVal, sortOrder]);

  // üõ†Ô∏è C·∫≠p nh·∫≠t b·ªô l·ªçc tr·∫°ng th√°i
  const handleStatusChange = (value) => {
    setStatusFilterVal(value);
  };

  // üõ†Ô∏è C·∫≠p nh·∫≠t s·∫Øp x·∫øp ng√†y
  const handleSortChange = (value) => {
    setSortOrder(value);
  };

  // üõ†Ô∏è X·ª≠ l√Ω √¥ t√¨m ki·∫øm
  const handleSearchChange = (e) => {
    setSearchText(e.target.value);
  };

  // üõ†Ô∏è Xu·∫•t file Excel
  const handleExportFileExcel = () => {
    if (!receipts.length) {
      message.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!");
      return;
    }

    const excel = new Excel();
    excel
      .addSheet("Danh s√°ch ƒê∆°n Nh·∫≠p Kho")
      .addColumns(columns.filter((col) => col.dataIndex !== "action"))
      .addDataSource(
        receipts.map((receipt) => ({
          manager: receipt.manager_id?.full_name || "Kh√¥ng c√≥ d·ªØ li·ªáu",
          storage: receipt.storage_id?.name_storage || "Kh√¥ng c√≥ d·ªØ li·ªáu",
          receiptType: receipt.receipt_supply_id ? "Cung c·∫•p" : "Thu h√†ng",
          quantity: receipt.receipt_request_id?.quantity || receipt.receipt_supply_id?.quantity || "Kh√¥ng c√≥ d·ªØ li·ªáu",
          status: receipt.status,
          createdAt: converDateString(receipt.createdAt),
          updatedAt: converDateString(receipt.updatedAt),
          note: receipt.note || "Kh√¥ng c√≥ ghi ch√∫",
        })),
        { str2Percent: true }
      )
      .saveAs("DanhSachDonNhapKho.xlsx");
  };

  // üõ†Ô∏è C·∫•u h√¨nh c·ªôt b·∫£ng
  const columns = [
    {
      title: "Ng∆∞·ªùi Qu·∫£n L√Ω",
      dataIndex: ["manager_id", "full_name"],
      key: "manager_id",
    },
    {
      title: "Lo·∫°i ƒê∆°n H√†ng",
      dataIndex: "receipt_supply_id",
      key: "receipt_type",
      render: (_, record) => (record.receipt_supply_id ? <Tag color="blue">Cung c·∫•p</Tag> : <Tag color="green">Thu h√†ng</Tag>),
    },
    {
      title: "Kho",
      dataIndex: ["storage_id", "name_storage"],
      key: "storage_id",
    },
    {
      title: "Tr·∫°ng Th√°i",
      dataIndex: "status",
      key: "status",
      render: (status) => {
        let color = status === "Ch·ªù duy·ªát" ? "gold" : status === "ƒê√£ duy·ªát" ? "green" : "red";
        return <Tag color={color}>{status}</Tag>;
      },
    },
    {
      title: "Ng√†y Nh·∫≠p Kho",
      dataIndex: "createdAt",
      key: "createdAt",
      render: (date) => (date ? converDateString(date) : "Kh√¥ng c√≥ d·ªØ li·ªáu"),
    },
    {
      title: "Ng√†y C·∫≠p Nh·∫≠t",
      dataIndex: "updatedAt",
      key: "updatedAt",
      render: (date) => (date ? converDateString(date) : "Kh√¥ng c√≥ d·ªØ li·ªáu"),
    },
  ];

  return (
    <div className="fuel-storage-receipt-list">
      <h2>Danh s√°ch ƒê∆°n Nh·∫≠p Kho</h2>

      {/* üîç √î t√¨m ki·∫øm + B·ªô l·ªçc tr·∫°ng th√°i + S·∫Øp x·∫øp */}
      <div className="filters" style={{ display: "flex", gap: "10px", marginBottom: "20px" }}>
        <Input
          placeholder="T√¨m ki·∫øm n√¢ng cao..."
          prefix={<SearchOutlined />}
          value={searchText}
          onChange={handleSearchChange}
          style={{ width: 250 }}
        />

        <Select onChange={handleStatusChange} value={statusFilterVal} placeholder="L·ªçc theo tr·∫°ng th√°i" style={{ width: 150 }}>
          <Option value="">T·∫•t c·∫£</Option>
          <Option value="Ch·ªù duy·ªát">Ch·ªù duy·ªát</Option>
          <Option value="ƒê√£ duy·ªát">ƒê√£ duy·ªát</Option>
          <Option value="ƒê√£ hu·ª∑">ƒê√£ hu·ª∑</Option>
        </Select>

        <Select onChange={handleSortChange} value={sortOrder} style={{ width: 150 }}>
          <Option value="asc">C≈© nh·∫•t tr∆∞·ªõc</Option>
          <Option value="desc">M·ªõi nh·∫•t tr∆∞·ªõc</Option>
        </Select>
      </div>

      <Table columns={columns} dataSource={receipts} loading={loading} rowKey="_id" pagination={{ pageSize: 10 }} />
    </div>
  );
};

export default FuelStorageReceiptList;
