import React, { useEffect, useState } from "react";
import {
  Table,
  Button,
  message,
  Space,
  Tag,
  Select,
  Input,
  Modal,
  Popover,
} from "antd";
import {
  EyeOutlined,
  SearchOutlined,
  DownloadOutlined,
  FilterOutlined,
} from "@ant-design/icons";
import axios from "axios";
import { useSelector } from "react-redux";
import { converDateString } from "../../../../ultils";
import { HiOutlineDocumentSearch } from "react-icons/hi";
import { useNavigate } from "react-router-dom";
import { Excel } from "antd-table-saveas-excel";
import _ from "lodash";
import DrawerComponent from "../../../DrawerComponent/DrawerComponent";
import { useLocation } from "react-router-dom";

const { Option } = Select;

const FuelStorageReceiptList = () => {
  const [receipts, setReceipts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedReceipt, setSelectedReceipt] = useState(null);
  const [isDrawerOpen, setIsDrawerOpen] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [debouncedSearch, setDebouncedSearch] = useState("");
  const [statusFilterVal, setStatusFilterVal] = useState("");
  const [sortOrder, setSortOrder] = useState("desc");
  const [showSearchInput, setShowSearchInput] = useState(false);
  const [showStatusFilter, setShowStatusFilter] = useState(false);
  const [receiptTypeFilter, setReceiptTypeFilter] = useState("");
  const [originalReceipts, setOriginalReceipts] = useState([]);
  const [showTypeFilter, setShowTypeFilter] = useState(false);

  const userRedux = useSelector((state) => state.user);
  const token = userRedux?.access_token || localStorage.getItem("access_token");
  const navigate = useNavigate();

  const fetchReceipts = async () => {
    setLoading(true);
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/fuel-storage/getAll`,
        {
          headers: { Authorization: `Bearer ${token}` },
          params: {
            search: debouncedSearch,
            status: statusFilterVal,
            sortOrder,
          },
        }
      );
      if (response.data.success) {
        const rawData = response.data.data; // üëâ khai b√°o bi·∫øn ƒë√∫ng ch·ªó
        setOriginalReceipts(rawData);
        applyFilters(rawData);
      } else {
        message.error("L·ªói khi l·∫•y danh s√°ch ƒë∆°n nh·∫≠p kho!");
      }
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!");
    }
    setLoading(false);
  };

  const location = useLocation();
useEffect(() => {
  const params = new URLSearchParams(location.search);
  const status = params.get("status");
  if (status) {
    setStatusFilterVal(status);
  }
}, [location.search]);

  const applyFilters = (data) => {
    let filtered = [...data];

    // L·ªçc theo lo·∫°i ƒë∆°n h√†ng
    if (receiptTypeFilter === "supply") {
      filtered = filtered.filter((item) => item.receipt_supply_id);
    } else if (receiptTypeFilter === "request") {
      filtered = filtered.filter((item) => item.receipt_request_id);
    }

    // L·ªçc theo tr·∫°ng th√°i (ƒë√£ c√≥)
    if (statusFilterVal) {
      filtered = filtered.filter((item) => item.status === statusFilterVal);
    }

    // L·ªçc theo ng∆∞·ªùi qu·∫£n l√Ω (ƒë√£ c√≥)
    if (debouncedSearch) {
      filtered = filtered.filter((item) =>
        item.manager_id?.full_name
          ?.toLowerCase()
          .includes(debouncedSearch.toLowerCase())
      );
    }

    setReceipts(filtered);
  };

  useEffect(() => {
    applyFilters(originalReceipts);
  }, [receiptTypeFilter, statusFilterVal, debouncedSearch]);

  const confirmUpdateStatus = (id, newStatus) => {
    Modal.confirm({
      title: `X√°c nh·∫≠n ${newStatus === "ƒê√£ duy·ªát" ? "Duy·ªát ƒê∆°n" : "H·ªßy ƒê∆°n"}`,
      content: `B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ${
        newStatus === "ƒê√£ duy·ªát" ? "duy·ªát" : "h·ªßy"
      } ƒë∆°n n√†y kh√¥ng?`,
      okText: "X√°c nh·∫≠n",
      cancelText: "H·ªßy",
      onOk: () => updateReceiptStatus(id, newStatus),
    });
  };

  const updateReceiptStatus = async (id, newStatus) => {
    try {
      setLoading(true);
      const response = await axios.put(
        `${process.env.REACT_APP_API_URL}/fuel-storage/update/${id}`,
        { status: newStatus },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      if (response.data.success) {
        message.success(`ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh: ${newStatus}`);

        setSelectedReceipt((prev) => ({ ...prev, status: newStatus }));
        setReceipts((prev) =>
          prev.map((r) => (r._id === id ? { ...r, status: newStatus } : r))
        );
      } else {
        message.error("C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i!");
      }
    } catch (error) {
      message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!");
    }
    setLoading(false);
  };

  useEffect(() => {
    const debounceFn = _.debounce(() => {
      setDebouncedSearch(searchText);
    }, 500);
    debounceFn();
    return () => debounceFn.cancel();
  }, [searchText]);

  useEffect(() => {
    fetchReceipts();
  }, [debouncedSearch, statusFilterVal, sortOrder]);

  const excelColumns = [
    { title: "Ng∆∞·ªùi Qu·∫£n L√Ω", dataIndex: "manager" },
    { title: "Lo·∫°i ƒê∆°n H√†ng", dataIndex: "receiptType" },
    { title: "Kho", dataIndex: "storage" },
    { title: "Tr·∫°ng Th√°i", dataIndex: "status" },
    { title: "Ng√†y Nh·∫≠p Kho", dataIndex: "createdAt" },
    { title: "Ng√†y C·∫≠p Nh·∫≠t", dataIndex: "updatedAt" },
    { title: "S·ªë l∆∞·ª£ng", dataIndex: "quantity" },
    { title: "Ghi ch√∫", dataIndex: "note" },
  ];

  const handleExportFileExcel = () => {
    if (!receipts.length) {
      message.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t!");
      return;
    }

    const excel = new Excel();
    excel
      .addSheet("Danh s√°ch ƒê∆°n Nh·∫≠p Kho")
      .addColumns(excelColumns)
      .addDataSource(
        receipts.map((receipt) => ({
          manager: receipt.manager_id?.full_name || "Kh√¥ng c√≥ d·ªØ li·ªáu",
          storage: receipt.storage_id?.name_storage || "Kh√¥ng c√≥ d·ªØ li·ªáu",
          receiptType: receipt.receipt_supply_id ? "Cung c·∫•p" : "Thu h√†ng",
          quantity:
            receipt.receipt_request_id?.quantity ||
            receipt.receipt_supply_id?.quantity ||
            "Kh√¥ng c√≥ d·ªØ li·ªáu",
          status: receipt.status,
          createdAt: converDateString(receipt.createdAt),
          updatedAt: converDateString(receipt.updatedAt),
          note:
            receipt.receipt_request_id?.note ||
            receipt.receipt_supply_id?.note ||
            "Kh√¥ng c√≥ ghi ch√∫",
        })),
        { str2Percent: true }
      )
      .saveAs("DanhSachDonNhapKho.xlsx");
  };

  const columns = [
    {
      title: (
        <div
          style={{ position: "relative", textAlign: "center", width: "100%" }}
        >
          <span>Ng∆∞·ªùi Qu·∫£n L√Ω</span>
          <div
            style={{
              position: "absolute",
              right: 0,
              top: "50%",
              transform: "translateY(-50%)",
            }}
          >
            <Popover
              content={
                <div style={{ padding: 10 }}>
                  <Input
                    placeholder="T√¨m ki·∫øm theo t√™n ng∆∞·ªùi qu·∫£n l√Ω..."
                    value={searchText}
                    onChange={(e) => setSearchText(e.target.value)}
                    style={{ width: 250 }}
                  />
                  <div style={{ marginTop: 10 }}>
                    <Button type="primary" onClick={() => fetchReceipts()}>
                      T√¨m
                    </Button>
                    <Button
                      onClick={() => setSearchText("")}
                      style={{ marginLeft: 8 }}
                    >
                      ƒê·∫∑t l·∫°i
                    </Button>
                    <Button
                      type="link"
                      onClick={() => setShowSearchInput(false)}
                      style={{ marginLeft: 8 }}
                    >
                      ƒê√≥ng
                    </Button>
                  </div>
                </div>
              }
              title="T√¨m ki·∫øm"
              trigger="click"
              visible={showSearchInput}
              onVisibleChange={() => setShowSearchInput(!showSearchInput)}
            >
              <Button
                type="link"
                icon={<SearchOutlined />}
                style={{ padding: 0, height: "auto", lineHeight: 1 }}
              />
            </Popover>
          </div>
        </div>
      ),
      align: "center",
      key: "manager_id",
      render: (_, record) => (
        <div style={{ textAlign: "center" }}>
          {record?.manager_id?.full_name || "Kh√¥ng r√µ"}
        </div>
      ),
    },
    // {
    //   title: (
    //     <div style={{ textAlign: "center", width: "100%" }}>Lo·∫°i ƒê∆°n H√†ng</div>
    //   ),
    //   key: "receipt_type",
    //   align: "center",
    //   render: (_, record) => (
    //     <div style={{ textAlign: "center" }}>
    //       {record.receipt_supply_id ? (
    //         <Tag color="blue">Cung c·∫•p</Tag>
    //       ) : (
    //         <Tag color="green">Thu h√†ng</Tag>
    //       )}
    //     </div>
    //   ),
    // },
    {
      title: (
        <div
          style={{ position: "relative", textAlign: "center", width: "100%" }}
        >
          <span>Lo·∫°i ƒê∆°n H√†ng</span>
          <div
            style={{
              position: "absolute",
              right: 0,
              top: "50%",
              transform: "translateY(-50%)",
            }}
          >
            <Popover
              content={
                <div style={{ padding: 10 }}>
                  <Select
                    value={receiptTypeFilter}
                    onChange={(val) => setReceiptTypeFilter(val)}
                    style={{ width: 200 }}
                  >
                    <Option value="">T·∫•t c·∫£</Option>
                    <Option value="supply">Cung c·∫•p</Option>
                    <Option value="request">Thu h√†ng</Option>
                  </Select>
                </div>
              }
              title="L·ªçc theo lo·∫°i ƒë∆°n h√†ng"
              trigger="click"
              visible={showTypeFilter}
              onVisibleChange={() => setShowTypeFilter(!showTypeFilter)}
            >
              <Button
                type="link"
                icon={<FilterOutlined />}
                style={{ padding: 0, height: "auto", lineHeight: 1 }}
              />
            </Popover>
          </div>
        </div>
      ),
      key: "receipt_type",
      align: "center",
      render: (_, record) => (
        <div style={{ textAlign: "center" }}>
          {record.receipt_supply_id ? (
            <Tag color="blue">Cung c·∫•p</Tag>
          ) : (
            <Tag color="green">Thu h√†ng</Tag>
          )}
        </div>
      ),
    },

    {
      title: <div style={{ textAlign: "center", width: "100%" }}>Kho</div>,
      dataIndex: ["storage_id", "name_storage"],
      key: "storage_id",
      align: "center",
      render: (text) => (
        <div style={{ textAlign: "center" }}>{text || "Kh√¥ng c√≥ d·ªØ li·ªáu"}</div>
      ),
    },

    {
      title: (
        <div
          style={{ position: "relative", textAlign: "center", width: "100%" }}
        >
          <span>Tr·∫°ng Th√°i</span>
          <div
            style={{
              position: "absolute",
              right: 0,
              top: "50%",
              transform: "translateY(-50%)",
            }}
          >
            <Popover
              content={
                <div style={{ padding: 10 }}>
                  <Select
                    value={statusFilterVal}
                    onChange={(val) => setStatusFilterVal(val)}
                    style={{ width: 200 }}
                  >
                    <Option value="">T·∫•t c·∫£ tr·∫°ng th√°i</Option>
                    <Option value="Ch·ªù duy·ªát">Ch·ªù duy·ªát</Option>
                    <Option value="ƒê√£ duy·ªát">ƒê√£ duy·ªát</Option>
                    <Option value="ƒê√£ hu·ª∑">ƒê√£ hu·ª∑</Option>
                  </Select>
                </div>
              }
              title="L·ªçc theo tr·∫°ng th√°i"
              trigger="click"
              visible={showStatusFilter}
              onVisibleChange={() => setShowStatusFilter(!showStatusFilter)}
            >
              <Button
                type="link"
                icon={<FilterOutlined />}
                style={{ padding: 0, height: "auto", lineHeight: 1 }}
              />
            </Popover>
          </div>
        </div>
      ),

      dataIndex: "status",
      align: "center",
      key: "status",
      render: (status) => {
        let color =
          status === "Ch·ªù duy·ªát"
            ? "gold"
            : status === "ƒê√£ duy·ªát"
            ? "green"
            : "red";
        return (
          <div style={{ textAlign: "center" }}>
            <Tag color={color}>{status}</Tag>
          </div>
        );
      },
    },
    {
      title: (
        <div style={{ textAlign: "center", width: "100%" }}>Ng√†y Nh·∫≠p Kho</div>
      ),
      dataIndex: "createdAt",
      key: "createdAt",
      align: "center",
      sorter: (a, b) => new Date(a.createdAt) - new Date(b.createdAt),
      render: (date) => (
        <div style={{ textAlign: "center" }}>
          {date ? converDateString(date) : "Kh√¥ng c√≥ d·ªØ li·ªáu"}
        </div>
      ),
    },

    {
      title: (
        <div style={{ textAlign: "center", width: "100%" }}>Ng√†y C·∫≠p Nh·∫≠t</div>
      ),
      dataIndex: "updatedAt",
      key: "updatedAt",
      align: "center",
      render: (date) => (
        <div style={{ textAlign: "center" }}>
          {date ? converDateString(date) : "Kh√¥ng c√≥ d·ªØ li·ªáu"}
        </div>
      ),
    },

    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      align: "center",
      render: (_, record) => (
        <Button
          type="link"
          // icon={<HiOutlineDocumentSearch style={{ fontSize: "20px", alignItems: 'center' }} />}
          onClick={() => {
            setSelectedReceipt(record);
            setIsDrawerOpen(true);
          }}
        >
          <div
            style={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
            }}
          >
            <HiOutlineDocumentSearch style={{ fontSize: "24px" }} />
          </div>
        </Button>
      ),
    },
  ];

  return (
    <div className="fuel-storage-receipt-list">
      {/* Ti√™u ƒë·ªÅ */}
      <div className="flex justify-between items-center mb-4">
        {/* N√∫t Quay l·∫°i */}
        <button
          onClick={() => navigate(-1)}
          className="flex mb-4 items-center bg-blue-500 text-white font-semibold py-1 px-3 rounded-md shadow-sm hover:bg-blue-600 transition duration-300"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className="h-4 w-4 mr-1"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M15 12H3m0 0l6-6m-6 6l6 6"
            />
          </svg>
          Quay l·∫°i
        </button>
        <h5 className="text-4xl font-bold text-gray-800 text-center flex-1 mr-6 ">
          Qu·∫£n l√Ω ƒê∆°n Nh·∫≠p Kho
        </h5>
      </div>

      {/* N√∫t Xu·∫•t Excel */}
      <div className="flex justify-end mb-1">
        <Button
          icon={<DownloadOutlined />}
          type="primary"
          className="bg-blue-600 text-white"
          onClick={handleExportFileExcel}
        >
          Xu·∫•t Excel
        </Button>
      </div>

      <Table
        columns={columns}
        dataSource={receipts}
        loading={loading}
        rowKey="_id"
        pagination={{ pageSize: 6 }}
      />

      {/* Drawer Chi ti·∫øt */}
      <DrawerComponent
        title="Chi ti·∫øt ƒê∆°n Nh·∫≠p Kho"
        isOpen={isDrawerOpen}
        onClose={() => {
          setIsDrawerOpen(false);
          setSelectedReceipt(null);
        }}
        placement="right"
        width="30%"
      >
        {selectedReceipt ? (
          <div className="">
            {/* Ti√™u ƒë·ªÅ */}
            {/* <h2 className="text-xl font-bold uppercase text-gray-800 text-center mb-4">
              Th√¥ng tin chi ti·∫øt
            </h2> */}

            {/* B·∫£ng hi·ªÉn th·ªã d·ªØ li·ªáu */}
            <div className="border border-gray-300 rounded-lg p-4">
              <div className="grid grid-cols-10 gap-0">
                {/* Ng∆∞·ªùi Qu·∫£n L√Ω */}
                <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                  Ng∆∞·ªùi Qu·∫£n L√Ω
                </div>
                <div className="col-span-6 p-3 border border-gray-300">
                  {selectedReceipt.manager_id?.full_name || "Kh√¥ng c√≥"}
                </div>

                {/* Kho */}
                <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                  Kho
                </div>
                <div className="col-span-6 p-3 border border-gray-300">
                  {selectedReceipt.storage_id?.name_storage || "Kh√¥ng c√≥"}
                </div>

                {/* Lo·∫°i ƒê∆°n H√†ng */}
                <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                  Lo·∫°i ƒê∆°n H√†ng
                </div>
                <div className="col-span-6 p-3 border border-gray-300">
                  {selectedReceipt.receipt_supply_id ? "Cung c·∫•p" : "Thu h√†ng"}
                </div>

                {/* S·ªë L∆∞·ª£ng */}
                <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                  S·ªë L∆∞·ª£ng
                </div>
                <div className="col-span-6 p-3 border border-gray-300">
                  {selectedReceipt.receipt_request_id?.quantity ||
                    selectedReceipt.receipt_supply_id?.quantity ||
                    "Kh√¥ng c√≥"}
                </div>

                {/* Tr·∫°ng Th√°i */}
                <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                  Tr·∫°ng Th√°i
                </div>
                <div className="col-span-6 p-3 border border-gray-300">
                  <Tag
                    color={
                      selectedReceipt.status === "Ch·ªù duy·ªát"
                        ? "gold"
                        : selectedReceipt.status === "ƒê√£ duy·ªát"
                        ? "green"
                        : "red"
                    }
                  >
                    {selectedReceipt.status}
                  </Tag>
                </div>

                {/* Ng√†y Nh·∫≠p Kho */}
                <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                  Ng√†y Nh·∫≠p Kho
                </div>
                <div className="col-span-6 p-3 border border-gray-300">
                  {converDateString(selectedReceipt.createdAt) || "Kh√¥ng c√≥"}
                </div>

                {/* Ng√†y C·∫≠p Nh·∫≠t */}
                <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                  Ng√†y C·∫≠p Nh·∫≠t
                </div>
                <div className="col-span-6 p-3 border border-gray-300">
                  {converDateString(selectedReceipt.updatedAt) || "Kh√¥ng c√≥"}
                </div>

                {/* Ghi ch√∫ (N·∫øu c√≥) */}
                {selectedReceipt.receipt_request_id?.note ||
                selectedReceipt.receipt_supply_id?.note ? (
                  <>
                    <div className="col-span-4 font-semibold p-3 bg-gray-100 border border-gray-300">
                      Ghi ch√∫
                    </div>
                    <div className="col-span-6 p-3 border border-gray-300 whitespace-pre-wrap">
                      {selectedReceipt.receipt_request_id?.note ||
                        selectedReceipt.receipt_supply_id?.note}
                    </div>
                  </>
                ) : null}
              </div>
            </div>

            {/* N√∫t Duy·ªát / H·ªßy */}
            <div className="flex justify-center gap-4 mt-6">
              <Button
                type="primary"
                className="px-6 py-2 text-lg"
                onClick={() =>
                  confirmUpdateStatus(selectedReceipt._id, "ƒê√£ duy·ªát")
                }
                disabled={
                  loading ||
                  selectedReceipt.status === "ƒê√£ duy·ªát" ||
                  selectedReceipt.status === "ƒê√£ hu·ª∑"
                }
              >
                Duy·ªát
              </Button>
              <Button
                danger
                className="px-6 py-2 text-lg"
                onClick={() =>
                  confirmUpdateStatus(selectedReceipt._id, "ƒê√£ hu·ª∑")
                }
                disabled={
                  loading ||
                  selectedReceipt.status === "ƒê√£ hu·ª∑" ||
                  selectedReceipt.status === "ƒê√£ duy·ªát"
                }
              >
                H·ªßy
              </Button>
            </div>
          </div>
        ) : (
          <p className="text-center text-gray-500">ƒêang t·∫£i chi ti·∫øt...</p>
        )}
      </DrawerComponent>
    </div>
  );
};

export default FuelStorageReceiptList;
